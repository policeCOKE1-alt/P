----------------------------------------------------
-- Global Function Definitions (with stop methods)
----------------------------------------------------
-- (Ensure these URLs point to your updated remote scripts)
local script1URL = "https://raw.githubusercontent.com/policeCOKE1-alt/4/refs/heads/main/BallPredictorscript%20-%20Copy.txt"
local script2URL = "https://raw.githubusercontent.com/policeCOKE1-alt/5/refs/heads/main/InfStamScript%20-%20Copy.txt"
local script3URL = "https://raw.githubusercontent.com/policeCOKE1-alt/6/refs/heads/main/BallPredicotorScript2%20-%20Copy.txt"
local tracersURL = "https://raw.githubusercontent.com/policeCOKE1-alt/8/refs/heads/main/Tracers.txt"
local mapDeleterURL = "https://raw.githubusercontent.com/policeCOKE1-alt/7/refs/heads/main/MapDeleter.txt"

-- Global references to loaded scripts (returned tables)
_G.loadedScript1 = nil
_G.loadedScript2 = nil
_G.loadedScript3 = nil
_G.loadedScriptTracers = nil

-- Ball Predictor 1
_G.BallPredictor1On = function()
    print("[DEBUG] Enabling Ball Predictor 1...")
    _G.script1Enabled = true
    if not _G.loadedScript1 then
        local success, predictor = pcall(function() return loadstring(game:HttpGet(script1URL, true))() end)
        if success and predictor then
            _G.loadedScript1 = predictor
        else
            warn("[ERROR] Failed to load Ball Predictor 1 script.")
        end
    end
end
_G.BallPredictor1Off = function()
    print("[DEBUG] Disabling Ball Predictor 1...")
    _G.script1Enabled = false
    if _G.loadedScript1 and _G.loadedScript1.stop then
        pcall(function()
            print("[DEBUG] Calling Ball Predictor 1 stop method...")
            _G.loadedScript1.stop()
            print("[DEBUG] Ball Predictor 1 stop method called successfully.")
        end)
    else
        print("[WARN] No stop method available for Ball Predictor 1.")
    end
    _G.loadedScript1 = nil
end

-- Inf Stam
_G.InfStamOn = function()
    print("[DEBUG] Enabling Inf Stam...")
    _G.InfStamEnabled = true
    if not _G.loadedScript2 then
        local success, stam = pcall(function() return loadstring(game:HttpGet(script2URL, true))() end)
        if success and stam then
            _G.loadedScript2 = stam
        else
            warn("[ERROR] Failed to load Inf Stam script.")
        end
    end
end
_G.InfStamOff = function()
    print("[DEBUG] Disabling Inf Stam...")
    _G.InfStamEnabled = false
    if _G.loadedScript2 and _G.loadedScript2.stop then
        pcall(function()
            print("[DEBUG] Calling Inf Stam stop method...")
            _G.loadedScript2.stop()
            print("[DEBUG] Inf Stam stop method called successfully.")
        end)
    else
        print("[WARN] No stop method available for Inf Stam.")
    end
    _G.loadedScript2 = nil
end

-- Ball Predictor 2
_G.BallPredictor2On = function()
    print("[DEBUG] Enabling Ball Predictor 2...")
    _G.BallPredictor2Enabled = true
    if not _G.loadedScript3 then
        local success, predictor2 = pcall(function() return loadstring(game:HttpGet(script3URL, true))() end)
        if success and predictor2 then
            _G.loadedScript3 = predictor2
        else
            warn("[ERROR] Failed to load Ball Predictor 2 script.")
        end
    end
end
_G.BallPredictor2Off = function()
    print("[DEBUG] Disabling Ball Predictor 2...")
    _G.BallPredictor2Enabled = false
    if _G.loadedScript3 and _G.loadedScript3.stop then
        pcall(function()
            print("[DEBUG] Calling Ball Predictor 2 stop method...")
            _G.loadedScript3.stop()
            print("[DEBUG] Ball Predictor 2 stop method called successfully.")
        end)
    else
        print("[WARN] No stop method available for Ball Predictor 2.")
    end
    _G.loadedScript3 = nil
end

-- Tracers
_G.TracersOn = function()
    print("[DEBUG] Enabling Tracers...")
    _G.tracersEnabled = true
    if not _G.loadedScriptTracers then
        local success, tracers = pcall(function() return loadstring(game:HttpGet(tracersURL, true))() end)
        if success and tracers then
            _G.loadedScriptTracers = tracers
        else
            warn("[ERROR] Failed to load Tracers script.")
        end
    end
end
_G.TracersOff = function()
    print("[DEBUG] Disabling Tracers...")
    _G.tracersEnabled = false
    if _G.loadedScriptTracers and _G.loadedScriptTracers.stop then
        pcall(function()
            print("[DEBUG] Calling Tracers stop method...")
            _G.loadedScriptTracers.stop()
            print("[DEBUG] Tracers stop method called successfully.")
        end)
    else
        print("[WARN] No stop method available for Tracers.")
    end
    _G.loadedScriptTracers = nil
end

-- Map Deleter
_G.MapDeleterOn = function()
    print("[DEBUG] Enabling Map Deleter...")
    _G.mapDeleterEnabled = true
    local success = pcall(function() loadstring(game:HttpGet(mapDeleterURL, true))() end)
    if not success then
        warn("[ERROR] Failed to load Map Deleter script.")
    end
end
_G.MapDeleterOff = function()
    print("[DEBUG] Disabling Map Deleter...")
    _G.mapDeleterEnabled = false
    if _G.MapOff then
        pcall(function()
            print("[DEBUG] Calling MapDeleter stop method (_G.MapOff)...")
            _G.MapOff()
            print("[DEBUG] MapDeleter stop method (_G.MapOff) called successfully.")
        end)
    else
        print("[WARN] _G.MapOff is not defined; cannot restore the map automatically.")
    end
end

----------------------------------------------------
-- GUI Code
----------------------------------------------------
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

print("[DEBUG] Creating GUI...")

-- Create ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "MySploitGui"
screenGui.Parent = playerGui

-- Main Frame
local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 400, 0, 250)
mainFrame.Position = UDim2.new(0.5, -200, 0.5, -125)
mainFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
mainFrame.BackgroundTransparency = 0.3
mainFrame.BorderSizePixel = 0
mainFrame.Parent = screenGui

local originalSize = mainFrame.Size

-- Top Bar (draggable)
local topBar = Instance.new("Frame")
topBar.Size = UDim2.new(1, 0, 0, 30)
topBar.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
topBar.BackgroundTransparency = 0.3
topBar.BorderSizePixel = 0
topBar.Parent = mainFrame

local titleLabel = Instance.new("TextLabel")
titleLabel.Size = UDim2.new(1, -40, 1, 0)
titleLabel.Position = UDim2.new(0, 10, 0, 0)
titleLabel.BackgroundTransparency = 1
titleLabel.Text = "Made by PoliceCOKE1"
titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
titleLabel.Font = Enum.Font.SourceSansBold
titleLabel.TextScaled = false
titleLabel.TextSize = 12
titleLabel.TextXAlignment = Enum.TextXAlignment.Left
titleLabel.Parent = topBar

local minimizeButton = Instance.new("TextButton")
minimizeButton.Size = UDim2.new(0, 40, 1, 0)
minimizeButton.Position = UDim2.new(1, -40, 0, 0)
minimizeButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
minimizeButton.BackgroundTransparency = 0.3
minimizeButton.Text = "-"
minimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
minimizeButton.Font = Enum.Font.SourceSansBold
minimizeButton.TextScaled = false
minimizeButton.TextSize = 12
minimizeButton.Parent = topBar

-- Sidebar (scrollable frame for script buttons)
local sidebar = Instance.new("ScrollingFrame")
sidebar.Name = "Sidebar"
sidebar.Size = UDim2.new(0, 140, 1, -30)
sidebar.Position = UDim2.new(0, 0, 0, 30)
sidebar.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
sidebar.BackgroundTransparency = 0.3
sidebar.BorderSizePixel = 0
sidebar.CanvasSize = UDim2.new(0, 0, 0, 55 * 5)
sidebar.ScrollBarThickness = 5
sidebar.Parent = mainFrame

local uiListLayout = Instance.new("UIListLayout")
uiListLayout.Parent = sidebar
uiListLayout.SortOrder = Enum.SortOrder.LayoutOrder
uiListLayout.Padding = UDim.new(0, 5)

-- Right Content Area (for On/Off buttons)
local contentFrame = Instance.new("Frame")
contentFrame.Name = "ContentFrame"
contentFrame.Size = UDim2.new(1, -140, 1, -30)
contentFrame.Position = UDim2.new(0, 140, 0, 30)
contentFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
contentFrame.BackgroundTransparency = 0.3
contentFrame.BorderSizePixel = 0
contentFrame.Parent = mainFrame

-- Self-Destruct Button (bottom right corner)
local destructBtn = Instance.new("TextButton")
destructBtn.Size = UDim2.new(0, 80, 0, 30)
destructBtn.Position = UDim2.new(1, -90, 1, -40)
destructBtn.BackgroundColor3 = Color3.fromRGB(150, 0, 0)
destructBtn.Text = "Self-Destruct"
destructBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
destructBtn.Font = Enum.Font.SourceSansBold
destructBtn.TextScaled = false
destructBtn.TextSize = 12
destructBtn.Parent = mainFrame

local function updateVisibility(isMinimized)
    sidebar.Visible = not isMinimized
    contentFrame.Visible = not isMinimized
    destructBtn.Visible = not isMinimized
    titleLabel.Visible = not isMinimized
end

local minimized = false
updateVisibility(minimized)

minimizeButton.MouseButton1Click:Connect(function()
    if not minimized then
        minimized = true
        mainFrame.Size = UDim2.new(0, 40, 0, 40)
        minimizeButton.Text = "+"
        updateVisibility(minimized)
    else
        minimized = false
        mainFrame.Size = originalSize
        minimizeButton.Text = "-"
        updateVisibility(minimized)
    end
end)

-- Dragging functionality for the GUI
local dragging = false
local dragInput, dragStart, startPos
topBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = mainFrame.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)
topBar.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)
UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        local delta = input.Position - dragStart
        mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

----------------------------------------------------
-- Scripts Sidebar and Content (On/Off Buttons)
----------------------------------------------------
local function clearContent()
    for _, child in pairs(contentFrame:GetChildren()) do
        if child:IsA("GuiObject") then
            child:Destroy()
        end
    end
end

-- Updated scripts table using our new global functions
local scripts = {
    {
        Name = "Ball Predictor 1",
        Enabled = false,
        GlobalOn = _G.BallPredictor1On,
        GlobalOff = _G.BallPredictor1Off,
    },
    {
        Name = "Inf stam",
        Enabled = false,
        GlobalOn = _G.InfStamOn,
        GlobalOff = _G.InfStamOff,
    },
    {
        Name = "Ball Predictor 2",
        Enabled = false,
        GlobalOn = _G.BallPredictor2On,
        GlobalOff = _G.BallPredictor2Off,
    },
    {
        Name = "Tracers",
        Enabled = false,
        GlobalOn = _G.TracersOn,
        GlobalOff = _G.TracersOff,
    },
    {
        Name = "Map Deleter",
        Enabled = false,
        GlobalOn = _G.MapDeleterOn,
        GlobalOff = _G.MapDeleterOff,
        Warning = "Only turn this on when on a court"
    }
}

for i, scriptData in ipairs(scripts) do
    local btn = Instance.new("TextButton")
    -- Making the sidebar buttons a little smaller (height reduced to 40)
    btn.Size = UDim2.new(1, -10, 0, 40)
    btn.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    btn.BackgroundTransparency = 0.3
    btn.BorderSizePixel = 0
    btn.Text = scriptData.Name
    btn.TextColor3 = Color3.fromRGB(255, 255, 255)
    btn.Font = Enum.Font.SourceSansBold
    btn.TextScaled = false
    -- Reduced text size for sidebar buttons
    btn.TextSize = 12
    btn.TextWrapped = true
    btn.Parent = sidebar

    btn.MouseButton1Click:Connect(function()
        clearContent()

        local lbl = Instance.new("TextLabel")
        lbl.Size = UDim2.new(1, 0, 0, 40)
        lbl.BackgroundTransparency = 1
        lbl.Text = scriptData.Name
        lbl.TextColor3 = Color3.fromRGB(255, 255, 255)
        lbl.Font = Enum.Font.SourceSansBold
        lbl.TextScaled = false
        lbl.TextSize = 14
        lbl.TextWrapped = true
        lbl.Parent = contentFrame

        local currentOffset = 40

        if scriptData.Warning then
            local warnLbl = Instance.new("TextLabel")
            warnLbl.Size = UDim2.new(1, 0, 0, 20)
            warnLbl.Position = UDim2.new(0, 0, 0, currentOffset)
            warnLbl.BackgroundTransparency = 1
            warnLbl.Text = scriptData.Warning
            warnLbl.TextColor3 = Color3.new(0.607843, 0.058824, 0.058824)
            warnLbl.Font = Enum.Font.SourceSansBold
            warnLbl.TextScaled = false
            warnLbl.TextSize = 12
            warnLbl.TextWrapped = true
            warnLbl.Parent = contentFrame
            currentOffset = currentOffset + 30
        else
            currentOffset = currentOffset + 10
        end

                -- On/Off buttons moved further to the right and styled to remove the blue outline.
        local onBtn = Instance.new("TextButton")
        onBtn.Size = UDim2.new(0, 80, 0, 40)
        onBtn.Position = UDim2.new(0, 40, 0, currentOffset)  -- increased X offset
        onBtn.BackgroundColor3 = Color3.new(0.086275, 0.086275, 0.086275)  -- black background
        onBtn.Text = "On"
        onBtn.TextColor3 = Color3.new(1, 1, 1)  -- white text
        onBtn.Font = Enum.Font.SourceSansBold
        onBtn.TextScaled = false
        onBtn.TextSize = 14
        onBtn.AutoButtonColor = false  -- disable default blue highlight
        onBtn.BorderSizePixel = 0       -- remove border
        onBtn.Parent = contentFrame

        local offBtn = Instance.new("TextButton")
        offBtn.Size = UDim2.new(0, 80, 0, 40)
        offBtn.Position = UDim2.new(0, 130, 0, currentOffset)  -- adjusted further to the right
        offBtn.BackgroundColor3 = Color3.new(0.086275, 0.086275, 0.086275)  -- black background
        offBtn.Text = "Off"
        offBtn.TextColor3 = Color3.new(1, 1, 1)  -- white text
        offBtn.Font = Enum.Font.SourceSansBold
        offBtn.TextScaled = false
        offBtn.TextSize = 14
        offBtn.AutoButtonColor = false  -- disable default blue highlight
        offBtn.BorderSizePixel = 0       -- remove border
        offBtn.Parent = contentFrame

        onBtn.MouseButton1Click:Connect(function()
            if not scriptData.Enabled then
                print("[DEBUG] Enabling " .. scriptData.Name)
                scriptData.GlobalOn()
                scriptData.Enabled = true
                print("[DEBUG] " .. scriptData.Name .. " is now Enabled")
            end
        end)
        offBtn.MouseButton1Click:Connect(function()
            if scriptData.Enabled then
                print("[DEBUG] Disabling " .. scriptData.Name)
                scriptData.GlobalOff()
                scriptData.Enabled = false
                print("[DEBUG] " .. scriptData.Name .. " is now Disabled")
            end
        end)
    end)
end

-- COMMENTED OUT: This line was causing the "Fire is not a valid member" error
-- if sidebar:FindFirstChildWhichIsA("TextButton") then
--     sidebar:FindFirstChildWhichIsA("TextButton").MouseButton1Click:Fire()
-- end

----------------------------------------------------
-- Self-Destruct Button (Ensures GUI is destroyed NO MATTER WHAT)
----------------------------------------------------
destructBtn.MouseButton1Click:Connect(function()
    print("[DEBUG] Self-Destruct Initiated...")
    
    -- Disable each module with debugging prints
    print("[DEBUG] Attempting to disable Ball Predictor 1...")
    pcall(function() if _G.BallPredictor1Off then _G.BallPredictor1Off() end end)
    print("[DEBUG] Attempting to disable Inf Stam...")
    pcall(function() if _G.InfStamOff then _G.InfStamOff() end end)
    print("[DEBUG] Attempting to disable Ball Predictor 2...")
    pcall(function() if _G.BallPredictor2Off then _G.BallPredictor2Off() end end)
    print("[DEBUG] Attempting to disable Tracers...")
    pcall(function() if _G.TracersOff then _G.TracersOff() end end)
    print("[DEBUG] Attempting to disable Map Deleter...")
    pcall(function() if _G.MapDeleterOff then _G.MapDeleterOff() end end)
    
    -- Clear global script references and flags
    print("[DEBUG] Clearing global script references and flags...")
    _G.loadedScript1 = nil
    _G.loadedScript2 = nil
    _G.loadedScript3 = nil
    _G.loadedScriptTracers = nil
    _G.script1Enabled = false
    _G.InfStamEnabled = false
    _G.BallPredictor2Enabled = false
    _G.tracersEnabled = false
    _G.mapDeleterEnabled = false
    
    -- Optionally, clear the off functions from _G (use with caution)
    _G.BallPredictor1Off = nil
    _G.InfStamOff = nil
    _G.BallPredictor2Off = nil
    _G.TracersOff = nil
    _G.MapDeleterOff = nil
    
    -- Destroy the GUI regardless of any previous errors
    print("[DEBUG] Attempting to destroy the GUI...")
    local success, err = pcall(function() screenGui:Destroy() end)
    if success then
        print("[DEBUG] GUI destroyed successfully.")
    else
        print("[ERROR] Failed to destroy GUI: " .. tostring(err))
    end

    print("[DEBUG] Self-Destruct process completed!")
end)

----------------------------------------------------
-- Keybind: Shift + P to toggle mainFrame visibility
----------------------------------------------------
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.P and UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
        if minimized then
            minimized = false
            mainFrame.Size = originalSize
            minimizeButton.Text = "-"
            updateVisibility(minimized)
        else
            minimized = true
            mainFrame.Size = UDim2.new(0, 40, 0, 40)
            minimizeButton.Text = "+"
            updateVisibility(minimized)
        end
    end
end)

print("[DEBUG] GUI script finished loading.")
